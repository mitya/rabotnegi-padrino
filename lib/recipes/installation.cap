namespace :install do
  task :default do
    deploy.setup
    git
    deploy.update
    gems
    database
    deploy.migrate
    nginx
    logrotate
  end

  task :undo do
    run_rake "db:drop"
    sudo "rm -rf #{deploy_to}"
    sudo "rm -rf #{nginx_config_path}"
    sudo "rm -rf #{logrotate_config_path}"
    sudo "/opt/nginx/sbin/nginx -s reload"
  end

  task :git do
    git_key_path = "/home/#{user}/.ssh/id_git_#{application}"
    ssh_config_path = "/home/#{user}/.ssh/config"
    
    top.upload git_key, git_key_path, :mode => "600"
    run "touch #{ssh_config_path}"
    run "chmod 600 #{ssh_config_path}"

    ssh_config = <<-end
      Host #{git_host}
      User git
      IdentityFile #{git_key_path}
    end

    entry_delimiter = "## config for #{git_host}"
    entry = entry_delimiter + "\n" + ssh_config + entry_delimiter + "\n"
    
    current_config = capture "cat #{ssh_config_path}"
    current_config.gsub! /(\n|\r)+/, "\n" # there is a bunch of "\r" here
    current_config.gsub! /^#{entry_delimiter}$.*^#{entry_delimiter}$/m, ''
        
    put current_config + entry, ssh_config_path
  end

  task :gems do
    run "cd #{current_path} && #{sudo} bundle"
  end

  task :database do
    run_rake "db:create"
  end

  task :nginx do
    config = <<-end.strip_heredoc
      server {
        listen 80;
        server_name #{domain};
        root #{current_path}/public;
        passenger_enabled on;
        passenger_min_instances 1;
        rack_env #{rails_env};

        log_format asset '$remote_addr [$time_local] "$request" $status $body_bytes_sent';

        error_log  #{current_path}/log/web.err notice;
        access_log #{current_path}/log/web.log combined;
        
        gzip             on;
        gzip_types       text/plain text/css text/javascript application/xml application/json application/javascript application/x-javascript;
        gzip_min_length  512;
        gzip_disable     "msie6";
        
        location ~ ^/((rabotnegi/)?assets)/ {
          # gzip_static on;
          expires 1y;
          add_header Cache-Control public;
          access_log #{current_path}/log/asset.log asset;
        }
      }
      
      server {
        server_name www.#{domain};
        rewrite ^ $scheme://#{domain}$uri permanent;
      }
      
      passenger_pre_start http://#{domain};
    end

    put_as_user nginx_config_path, config
    sudo "/opt/nginx/sbin/nginx -s reload"
  end

  task :redis_web do
    app = "redis_web"
    app_path = "/app/#{app}"
    config_path = "/opt/nginx/conf/sites/#{app}"
  
    config = <<-end
      server {
        listen 80;
        server_name redis-admin.#{domain};
        root #{app_path}/public;
        passenger_enabled on;
        rack_env production;

        error_log  #{app_path}/log/web.err notice;
        access_log #{app_path}/log/web.log combined;

        auth_basic "Restricted";
        auth_basic_user_file htpasswd;
      }
    end
  
    put_as_user config_path, config
    sudo "/opt/nginx/sbin/nginx -s reload"
  end  
  
  task :logrotate do
    config = <<-end
      #{current_path}/log/*.log
      #{current_path}/log/*.out
      #{current_path}/log/*.output
      #{current_path}/log/*.err
      #{base_path}/log/*.log
      #{base_path}/log/*.out
      #{base_path}/log/*.output
      #{base_path}/log/*.err
      {
        daily
        missingok
        rotate 7
        size 1M
        compress
        copytruncate
        notifempty  
      }
    end

    put config, logrotate_config_path
  end  
  
  namespace :monit do
    task :resque do
      number = 1

      env = "RACK_ENV=#{rails_env} PATH=/usr/bin:/bin:$PATH RAILS_ROOT=#{current_path} RUBYOPT=-Ku"

      config = <<-end.strip_heredoc
        check process resque.#{number}
        with pidfile #{current_path}/tmp/pids/resque.#{number}.pid
        start program = "/usr/bin/env #{env} sh -l -c 'cd $RAILS_ROOT && bundle exec script/resque #{number} start > $RAILS_ROOT/log/resque.#{number}.output 2>&1'" as uid #{user} and gid #{user}
        stop program = "/usr/bin/env #{env} sh -l -c 'cd $RAILS_ROOT && bundle exec script/resque #{number} stop > $RAILS_ROOT/log/resque.#{number}.output 2>&1'" as uid #{user} and gid #{user}
        if totalmem is greater than 100 MB for 10 cycles then restart
        group resque
      end
      
      put_as_user "/etc/monit/conf.d/resque", config
      sudo "monit reload"      
    end
  end
end
